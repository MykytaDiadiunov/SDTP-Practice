import { FC, useContext } from 'react';
import {
  Box,
  Button,
  Card,
  CardBody,
  CardFooter,
  CardHeader,
  Flex,
  Heading,
  Link,
  Text,
} from '@chakra-ui/react';
import { IQuiz } from '../../../../@types/questions';
import { formatTime } from '../../../../utils/questions/formatTime';
import { hexToRGB } from '../../../../utils/color/hexToRGB';
import { ColorContext } from '../../../context/ColorContext';
import {
  DEFAULT_HOVER_COLOR,
  DEFAULT_QUIZ,
  motionDefaults,
} from '../../../../constants/quiz';
import { Link as RouterLink } from 'react-router-dom';
import { AnimatePresence, motion } from 'framer-motion';

type TProps = {
  quiz: IQuiz;
  setQuizData: (quiz: IQuiz) => void;
  setHasStarted: { on: () => void; off: () => void; toggle: () => void };
};

const ChakraCard = motion(Card);

export const Summary: FC<TProps> = ({ quiz, setQuizData, setHasStarted }) => {
  const { color } = useContext(ColorContext);

  const handleClick = (fullQuizReset: boolean) => {
    if (fullQuizReset) {
      setQuizData(DEFAULT_QUIZ);
      setHasStarted.off();
      return;
    }
    setQuizData({ ...DEFAULT_QUIZ, questions: quiz.questions });
    setHasStarted.on();
  };

  return (
    <Flex
      flexDirection="column"
      justifyContent="center"
      alignItems="center"
      maxW={'3xl'}
      m="0 auto"
      h="100%">
      <AnimatePresence>
        <ChakraCard
          {...motionDefaults}
          backgroundColor={`rgba(${hexToRGB(
            color,
            'values-only',
          ).toString()}, 1)`}
          color="white"
          borderRadius="25px"
          mx={3}
          px={{ base: 0, md: 5 }}
          py={{ base: 0, md: 6 }}>
          <CardHeader px={{ base: 0, sm: 3 }}>
            <Heading>
              <Flex
                alignItems="center"
                justifyContent="space-between">
                <Box
                  style={{
                    transform: 'scale(-1, 1)',
                    whiteSpace: 'nowrap',
                  }}
                  display={{ base: 'none', md: 'block' }}>
                  üéâüéâüéâ
                </Box>
                <Text
                  m="0 auto"
                  fontSize={{ base: '2xl', md: '3xl' }}>
                  –í—ñ–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
                </Text>

                <Box
                  display={{ base: 'none', md: 'block' }}
                  style={{ whiteSpace: 'nowrap' }}>
                  üéâüéâüéâ
                </Box>
              </Flex>
            </Heading>
          </CardHeader>

          <CardBody
            py={{ base: 0, sm: 3 }}
            px={{ base: 0, sm: 3 }}>
            <Flex
              flexDirection="column"
              w={{ base: '90%', md: '100%' }}
              m="0 auto">
              <Flex
                fontWeight="bold"
                alignItems="center"
                justifyContent="space-between"
                flexDirection={{ base: 'column', md: 'row' }}>
                <Box
                  px={3}
                  py={5}
                  w="full"
                  mx={1}
                  bgColor="rgba(0, 0, 0, 0.3)"
                  borderRadius="10px">
                  <Text textAlign="center">
                    –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {quiz.correctAnswers}/
                    {quiz.questions.length}
                  </Text>
                </Box>
                <Box
                  px={3}
                  py={5}
                  mt={{ base: 2, md: 0 }}
                  w="full"
                  mx={1}
                  bgColor="rgba(0, 0, 0, 0.3)"
                  borderRadius="10px">
                  <Text textAlign="center">
                    –ß–∞—Å –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è: {formatTime(quiz.timeElapsed)}
                  </Text>
                </Box>
              </Flex>
              <Text
                fontSize={{ base: 'md' }}
                fontWeight="bold"
                mt={4}>
                –î—è–∫—É—î–º–æ –≤–∞–º –∑–∞ —É—á–∞—Å—Ç—å –≤ –Ω–∞—à—ñ–π –≤—ñ–∫—Ç–æ—Ä–∏–Ω—ñ! –ú–∏ —Å–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, —â–æ –≤–∏
                –æ—Ç—Ä–∏–º–∞–ª–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è –≤—ñ–¥ –≥—Ä–∏ —Ç–∞ –¥—ñ–∑–Ω–∞–ª–∏—Å—è –±–∞–≥–∞—Ç–æ —Ü—ñ–∫–∞–≤–æ–≥–æ –ø—Ä–æ
                –Ω–∞—à –æ—Å–≤—ñ—Ç–Ω—ñ–π –∑–∞–∫–ª–∞–¥. <br />
                <br /> –ù–∞–≤—á–∞—é—á–∏—Å—å –≤ –Ω–∞—à–æ–º—É –∫–æ–ª–µ–¥–∂—ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –±–∞–≥–∞—Ç–æ
                –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É —Ç–∞ –∫–∞—Ä‚Äô—î—Ä–Ω–æ–≥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è. –Ø–∫—â–æ –≤–∏
                –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∏—Å—è —Ä–æ–∑—Ä–æ–±–∫–æ—é –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è, –º–∏ –∑–∞–ø—Ä–æ—à—É—î–º–æ
                –≤–∞—Å –¥–æ –Ω–∞—à–æ–≥–æ —Å–∞–π—Ç—É –∞–±–∏ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à –æ—Å–≤—ñ—Ç–Ω—ñ–π
                –∑–∞–∫–ª–∞–¥, –π–æ–≥–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ, –Ω–∞—Å–∏—á–µ–Ω–µ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–µ –∂–∏—Ç—Ç—è —Ç–∞ –Ω–æ–≤–∏–Ω–∏
                –∫–æ–ª–µ–¥–∂—É. <br />
                <br />
                –Ø–∫—â–æ –∂ –≤–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±–∞–ª—ñ–≤ —á–∏
                –Ω–µ–∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ —Å–≤–æ—ó–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º - –Ω–µ –∑–∞—Å–º—É—á—É–π—Ç–µ—Å—å! –í–∏ –º–æ–∂–µ—Ç–µ
                —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—Ä–æ–π—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É —â–µ —Ä–∞–∑ —Ç–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
                –ë–∞–∂–∞—î–º–æ –≤–∞–º —É—Å–ø—ñ—Ö—ñ–≤ —Ç–∞ –Ω–µ—Ö–∞–π –≤–∞—à—ñ –º—Ä—ñ—ó –ø—Ä–æ –ø—Ä–µ—Å—Ç–∏–∂–Ω—É –ø—Ä–æ—Ñ–µ—Å—ñ—é —Ç–∞
                —É—Å–ø—ñ—à–Ω—É –∫–∞—Ä‚Äô—î—Ä—É –∑–±—É–¥—É—Ç—å—Å—è!
              </Text>
            </Flex>
          </CardBody>
          <CardFooter px={{ base: 0, sm: 3 }}>
            <Flex
              justifyContent="space-between"
              alignItems="center"
              width="100%"
              flexDirection={{ base: 'column', md: 'row' }}>
              {['–ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑', '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞ –ø–æ—á–∞—Ç–æ–∫'].map((text, i) => (
                <Link
                  key={text}
                  w={{ base: '90%', md: '100%' }}
                  mx={1}
                  href="/"
                  as={RouterLink}
                  onClick={() => handleClick(i === 1)}
                  style={{ textDecoration: 'none' }}
                  mb={{ base: 2, md: 0 }}>
                  <Button
                    w="100%"
                    py={3}
                    size={{ base: 'md', md: 'xl' }}
                    fontSize="xl"
                    backgroundColor="#79848F"
                    _hover={{
                      backgroundColor: `${DEFAULT_HOVER_COLOR}`,
                      color: `${hexToRGB(color, 'full')}`,
                    }}>
                    {text}
                  </Button>
                </Link>
              ))}
            </Flex>
          </CardFooter>
        </ChakraCard>
      </AnimatePresence>
    </Flex>
  );
};
